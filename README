
# @(#) $Revision: 4.17 $ $Source: /judy/README $



#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    To build and install Judy, see the INSTALL_IT file.


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Notes on 0.1.6 (1June2004) by (dlb)

This version:

0)  See src/sh_build in case of 'make' failures
1)  The is an endian-neutral version I.E. (jp_DcdPop0 deleted)
2)  Should not require any special platform specific compile flags
3)  Includes JudyHS*() -- very fast, scalable string version 
4)  JudyHS*() is still preliminary and may need additional functionality.
5)  See test/manual/StringCompare.c for comparing different 'string' ADT's
6)  Deleted files: JudyMalloc.h, JudySL.h, JudySearch*
7)  All malloc() and free() is done thru interface routines in JudyMalloc.c
8)  Judy.h should work on all platforms that conform to ISO standards.
9)  After trying on many platforms, #include <stdint.h> was changed to <inttypes.h>
10) jbgraph has some 'bash/ksh' isms that need to be removed.
11) See test/manual/testjbgraph for plotting performance graphs
12) 'libtools' stuff is in unknown shape.
13) Does not "mangle" the root pointer (so old valgrind is not confused)
14) Conform to standard "C"
15) Change INSTALL to INSTALL_IT because it confused "make install"
16) The man pages need work to clean up the .html to be portable
17) Plus hundreds of changes to make the source more portable.

# This tree contains sources, documents, tests, and tools for the Judy package.
# This file is in a form that can be validated using the tool/readme script.

# NOTE:  The README files here describe some files that are not included in
# every Judy source package.


# WHAT IS JUDY?  (see below for list of top-level directories and files)
#
# Judy is a C library that implements a dynamic array.  Empty Judy arrays are
# declared with null pointers.  A Judy array consumes memory only when
# populated yet can grow to take advantage of all available memory.  Judy's key
# benefits are:  scalability, performance, memory efficiency, and ease of use.
# Judy arrays are designed to grow without tuning into the peta-element range,
# scaling near O(log-base-256) -- 1 more RAM access at 256 X population.
#
# Judy arrays are accessed with insert, retrieve, and delete calls for number
# or string indexes.  Configuration and tuning are not required -- in fact not
# possible.  Judy offers sorting, counting, and neighbor/empty searching.
# Indexes can be sequential, clustered, periodic, or random -- it doesn't
# matter to the algorithm.  Judy arrays can be arranged hierarchically to
# handle any bit patterns -- large indexes, sets of keys, etc.
#
# Judy is often an improvement over common data structures such as:  arrays,
# sparse arrays, hash tables, B-trees, binary trees, linear lists, skiplists,
# other sort and search algorithms, and counting functions.


# JUDY TOP DIRECTORY CONTENTS:

README		This file.
INSTALL_IT	Summary  instructions to build, check and install Judy.
COPYING		Judy deliverable license notice (the LGPL).

Makefile.multi	Multi-platform, multi-flavor Judy makefile that knows how to
		make all deliverables and a few other files, but not all Judy
		constructed files, especially tests.

make_includes/	Platform specific Makefile fragments included by Makefile.multi.

configure	Simple script to wrap around makefile, a placeholder for a
		"real" configure script generated by autoconf; see comments
		in the script.

src/		Header and source files used to build the package.
doc/		Documents, both external (to the package) and internal.
test/		Test support and some timing programs.
tool/		Primitive tool (jhton) to convert *.html files to "man" pages.
                and build tables used by Judy to malloc() sizes of memory.
